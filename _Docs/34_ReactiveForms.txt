1. Use Reactive Forms
  app.modules.ts:
   + ReactiveFormsModule

  register.component.ts:
    export class RegisterComponent implements OnInit {
      ...
      registerForm: FormGroup;  
      ...
      initializeForm() {
        this.registerForm = new FormGroup({
          username: new FormControl(),
          password: new FormControl(),
          confirmPassword: new FormControl()
        })
      }      
  register.component.html:
    <form [formGroup]='registerForm' (ngSubmit)="register()" autocomplete="off">
      <h2 class="text-center text-primary">Sign up</h2>
      <hr>
      <div class="form-group">
        <input type="text" class="form-control" 
          formControlName="username"
          placeholder="Username" >
      </div>
      <div class="form-group">
        <input type="password" class="form-control" 
          formControlName="password"
          placeholder="Password" >
      </div>
      <div class="form-group">
        <input type="password" class="form-control" 
          formControlName="confirmPassword"
          placeholder="Confirm Password" >
      </div>  
      <div class="form-group text-center">
        <button class="btn btn-success mr-2" type="submit">Register</button>
        <button class="btn btn-info mr-2" (click)="cancel()">Cancel</button>
      </div>
    </form>

    <p>Form value: {{ registerForm.value |  json}}</p>
    <p>Form status: {{ registerForm.status | json}}</p>  

2. Use Angular Validation for inputs

3. Implement custom validations

4. Implement reusable form controls

5. Working with Date inputs