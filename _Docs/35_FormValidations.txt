1. In register.component.ts:
  initializeForm() {
    this.registerForm = new FormGroup({
      username: new FormControl('', Validators.required),
      password: new FormControl('', [Validators.required, Validators.minLength(4), Validators.maxLength(8)]),
      confirmPassword: new FormControl('', [Validators.required, this.matchValues('password')])
    })
    // When password change again...
    this.registerForm.controls.password.valueChanges.subscribe(() => {
      this.registerForm.controls.confirmPassword.updateValueAndValidity();
    })
  }

  // Custom Validation
  matchValues(matchTo: string): ValidatorFn {
    return (control: AbstractControl) => {
      return control?.value === control?.parent?.controls[matchTo].value 
        ? null : {isMatching: true}
    }
  }

1. In register.component.html:  
  <form [formGroup]='registerForm' (ngSubmit)="register()" autocomplete="off">
    <h2 class="text-center text-primary">Sign up</h2>
    <hr>
    <div class="form-group">
      <input 
        [class.is-invalid]='registerForm.get("username").errors && registerForm.get("username").touched'
        type="text" 
        class="form-control" 
        formControlName="username"
        placeholder="Username" >
        <div class="invalid-feedback">Please enter a name</div>
    </div>
    <div class="form-group">
      <input 
        [class.is-invalid]='registerForm.get("password").errors && registerForm.get("password").touched'
        type="password" 
        class="form-control" 
        formControlName="password"
        placeholder="Password" >
        <div *ngIf="registerForm.get('password').hasError('required')" 
          class="invalid-feedback">Please enter a password</div>
        <div *ngIf="registerForm.get('password').hasError('minlength')" 
          class="invalid-feedback">Password must be at least 4 characters</div>
        <div *ngIf="registerForm.get('password').hasError('maxlength')" 
          class="invalid-feedback">Password must be at most 8 characters</div>
    </div>
    <div class="form-group">
      <input 
        [class.is-invalid]='registerForm.get("confirmPassword").errors && registerForm.get("confirmPassword").touched'
        type="password" 
        class="form-control" 
        formControlName="confirmPassword"
        placeholder="Confirm Password" >
        <div *ngIf="registerForm.get('confirmPassword').hasError('required')" 
          class="invalid-feedback">Please enter a confirm password</div>
        <div *ngIf="registerForm.get('confirmPassword').hasError('isMatching')" 
          class="invalid-feedback">Confirm password must match password</div>      
    </div>  
    <div class="form-group text-center">
      <button class="btn btn-success mr-2" type="submit">Register</button>
      <button class="btn btn-info mr-2" (click)="cancel()">Cancel</button>
    </div>
  </form>