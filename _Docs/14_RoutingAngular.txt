1. Angular routing

2. Adding a bootstrap theme

3. Using Angular route guards


How to Create a routing in Angular?
a. In app-routing.modules.ts
    const routes: Routes = [
      {path: '', component: HomeComponent},
      {path: 'members', component: MemberListComponent},
      {path: 'members/:id', component: MemberDetailComponent},
      {path: 'lists', component: ListsComponent},
      {path: 'messages', component: MessagesComponent},
      {path: '**', component: HomeComponent, pathMatch: 'full'},
    ];


b. in app.component.html:
    <app-nav></app-nav>
    <div class="container" style="margin-top: 100px">
-->   <router-outlet></router-outlet>
    </div>

c. In nav.component.html: use routerLink
    <a class="navbar-brand" routerLink='/'>Dating App</a>
    <ul class="navbar-nav mr-auto" *ngIf="accountService.currentUser$ | async">
      <li class="nav-item">
        <a class="nav-link" routerLink='/members' routerLinkActive='active'>Matches</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" routerLink='/lists' routerLinkActive='active'>Lists</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" routerLink='/messages' routerLinkActive='active'>Messages</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" (click)="logout()" href="#">Logout</a>
      </li>
    </ul> 

d. In nav.component.ts: inject router from angular:
    constructor(public accountService: AccountService, private router: Router) { }

    login() {
      this.accountService.login(this.model).subscribe(response => {
-->       this.router.navigateByUrl('/members');
        }, error => {
          console.log(error);
        });
    }

    logout() {
      this.accountService.logout();
-->   this.router.navigateByUrl('/');
    }